#+TITLE: gitmanager
* File Header
#+begin_src sh :tangle gitmanager
#!/bin/bash
#gitmanager: Manage multiple git repositories and branches
#Copyright (C) 2019-2021 Nan0Scho1ar (Christopher Mackinga)

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <https://www.gnu.org/licenses/>.

#+end_src
* Setup
#+begin_src sh :tangle gitmanager
options=("Search for git repos" "Check for changes" "List changes" "Pull and push" "Pull and push auto" "Add all changes + commit + push" "Clean old branches" "Merge origin/master into branches" "List branches" "Compare master" "Compare remote" "Quit")

if [ -t 1 ] && command -v tput > /dev/null; then
    # see if it supports colors
    ncolors=$(tput colors)
    if [ -n "$ncolors" ] && [ $ncolors -ge 8 ]; then
        bold="$(tput bold       || echo)"
        blink="$(tput blink      || echo)"
        reset="$(tput sgr0      || echo)"
        black="$(tput setaf 0   || echo)"
        red="$(tput setaf 1     || echo)"
        green="$(tput setaf 2   || echo)"
        yellow="$(tput setaf 3  || echo)"
        blue="$(tput setaf 4    || echo)"
        magenta="$(tput setaf 5 || echo)"
        cyan="$(tput setaf 6    || echo)"
        white="$(tput setaf 7   || echo)"
    fi
fi

repos=""
repo_auto=false
branch_auto=false


if [ -z $XDG_CONFIG_HOME ]; then
    cfg_path="$HOME/.config/gitmanager"
else
    cfg_path="$XDG_CONFIG_HOME/gitmanager"
fi
mkdir -p "$cfg_path"

#+end_src
* Helpers
** show_menu()
#+begin_src sh :tangle gitmanager
#Displays the option menu (if no args provided to program)
show_menu() {
    select option in "${options[@]}"; do
        echo $option
        break
    done
}

#+end_src
** set_repos()
#+begin_src sh :tangle gitmanager
##Sets repos variable using cache files
set_repos() { repos=$(cat ${cfg_path}/repos.cache | grep -v -f ${cfg_path}/repos.exclude); }

#+end_src
** using_repos()
#+begin_src sh :tangle gitmanager
##Sets repos and prints them to the user
using_repos() { set_repos && echo "Using repos:${cyan}$(cat ${cfg_path}/repos.cache | grep -vf ${cfg_path}/repos.exclude)${reset}"; }

#+end_src
* Colour
** colour_pwd()
#+begin_src sh :tangle gitmanager
#pwd but coloured
colour_pwd() { echo ${cyan}$(pwd)${reset}; }

#+end_src
** colour_path
#+begin_src sh :tangle gitmanager
#path bub coloured
colour_path() { echo ${cyan}${path}${reset}; }

#+end_src
* Git funcs
** git_branch()
#+begin_src sh :tangle gitmanager
#Used to make all calls to branch use the same formatting.
git_branch() { git branch; }

#+end_src
** git_commit()
#+begin_src sh :tangle gitmanager
#Used to make all calls to commit use the same formatting.
git_commit() { read -p "Please enter commit message: " && git commit -m "$REPLY"; }

#+end_src
** git_push()
#+begin_src sh :tangle gitmanager
#Used to make all calls to push use the same formatting.
git_push() { echo "${magenta}Pushing...${reset}" && git push && echo; }

#+end_src
** git_pull()
#+begin_src sh :tangle gitmanager
#Used to make all calls to pull use the same formatting.
git_pull() { echo "${magenta}Pulling...${reset}" && git pull; }

#+end_src
** git_merge()
#+begin_src sh :tangle gitmanager
#Used to make all calls to merge use the same formatting.
git_merge() { echo "${magenta}Merging...${reset}" && git merge $1; }

#+end_src
** git_merge_abort()
#+begin_src sh :tangle gitmanager
#Used to make all calls to merge use the same formatting.
git_merge_abort() { echo "${magenta}Aborting Merge...${reset}" && git merge --abort; }

#+end_src
** git_rebase()
#+begin_src sh :tangle gitmanager
#Used to make all calls to rebase use the same formatting.
git_rebase() { echo "${magenta}Rebasing...${reset}" && git rebase $1; }

#+end_src
** git_checkout()
#+begin_src sh :tangle gitmanager
#Used to make all calls to checkout use the same formatting.
git_checkout() { git checkout $1 2>&1 1>/dev/null | sed -E "s/(.+')(.+)('.*)/\1${blue}\2${reset}\3/"; }

#+end_src
** git_fetch()
#+begin_src sh :tangle gitmanager
#Fetches a git repo
git_fetch() {
    cd $1
    if [ -z $2 ]; then
        echo -e "${magenta}Fetching...${reset} $(colour_pwd)"
        git fetch origin --prune 2>&1 >/dev/null;
    else
        tput cup $2 0
        echo -e "${magenta}Fetching...${reset} $(colour_pwd)"
        git fetch origin --prune 2>&1 >/dev/null;
        tput cup $2 0
        echo -e "${magenta}Fetching...${reset} $(colour_pwd)    ${magenta}Done${reset}"
    fi
}

#+end_src
** git_fetch_all_repos()
#+begin_src sh :tangle gitmanager
#Fetches all repos
git_fetch_all_repos() {
    echo -e "\e[?1049h"
    sleep 0.05
    line_num=0
    for path in $repos; do
        git_fetch "$path/.." $line_num &
        line_num=$((line_num+1))
        sleep 0.01
    done
    wait
    echo -e "\e[?1049l"
    tput cuu 1
}

#+end_src
** git_status()
#+begin_src sh :tangle gitmanager
#Calls git status with ability to use cached value
git_status() {
#    if [[ "$1" == "CACHED" ]]; then
#	echo $status
#	return
#    fi
#    status=$(git status | sed "s/\n/\\n/")
#    status=$(git status)
#    echo $status
	git status
}

#+end_src
** git_get_branches()
#+begin_src sh :tangle gitmanager
#Checks out master and updates list of branches
git_get_branches() {
    git_checkout master
    branches=$(git for-each-ref --format='%(refname)' refs/heads/ | sed "s|refs/heads/||")
    echo -e "\nFound branches:\n$(echo ${blue}${branches}${reset} | tr " " "\n")\n"
}

#+end_src
** git_summary()
#+begin_src sh :tangle gitmanager
#Provides a one line summary on the current repo/branch
git_summary() {
    tree_is_clean && branch_up_to_date "CACHED" && echo "$(colour_pwd): ${green}No changes found${reset}" && return 0
    tree_is_clean "CACHED" && echo "$(colour_pwd): ${yellow}Out of sync${reset}" && return 1
    has_conflicts "CACHED" && echo "$(colour_pwd): ${red}Merge conflict detected${reset}" && return 2
    echo "$(colour_pwd): ${red}Changes detected${reset}" && return 3
}

#+end_src
* Checks
** tree_is_clean()
#+begin_src sh :tangle gitmanager
#Checks if the current branch working tree is clean. arg1 can be used to toggle CACHED
tree_is_clean() { git_status $1 | grep -q "nothing to commit, working tree clean" && return 0 || return 1; }

#+end_src
** check_should_skip_repo()
#+begin_src sh :tangle gitmanager
#Checks if a repo should be skipped
check_should_skip_repo() {
    [[ "$repo_auto" == true ]] || ask "Update project $(colour_path)" || return 1
    git_fetch "$path/.."
    ask_if_skip_dirty && return 0 || echo; return 1
}

#+end_src
** branch_up_to_date()
#+begin_src sh :tangle gitmanager
#Checks if the current branch is up to date. arg1 can be used to toggle CACHED
branch_up_to_date() { git_status $1 | grep -q "Your branch is up to date with " && return 0 || return 1; }

#+end_src
** has_conflicts()
#+begin_src sh :tangle gitmanager
#Checks if the current branch has conflicts. arg1 can be used to toggle CACHED
has_conflicts() { git_status $1 | grep -Eq "both added|both modified" && return 0 || return 1; }

#+end_src
** get_ahead_behind()
#+begin_src sh :tangle gitmanager
#Checks how far ahead/behind a branch is
get_ahead_behind() {
    git_upstream_status_delta=$(git rev-list --left-right ${1}...${2} -- 2>/dev/null)
    AHEAD=$(echo $git_upstream_status_delta | grep -c '^<');
    BEHIND=$(echo $git_upstream_status_delta | grep -c '^>');
    [[ "$AHEAD" == 0 ]] && ahead="${green}$AHEAD${reset}" || ahead="${red}$AHEAD${reset}"
    [[ "$BEHIND" == 0 ]] && behind="${green}$BEHIND${reset}" || behind="${red}$BEHIND${reset}"
}


#+end_src
* Ask
** ask()
#+begin_src sh :tangle gitmanager
#Promts the user to answer a yes/no question.
#Returns after a single char is entered without hitting return.
ask() {
    read -p "${1} ${yellow}y/n${reset} " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]] && return 0 || return 1
}

#+end_src
** ask_if_push()
#+begin_src sh :tangle gitmanager
#Asks the user if they want to push then pushes and shows status.
ask_if_push() {
    git_checkout $branch | grep -q "but the upstream is gone." && echo -e "Remote has been deleted. Pushing will recreate it.\n"
    ask "push" && git_push && git_status && echo
}

#+end_src
** ask_if_skip_repo()
#+begin_src sh :tangle gitmanager
#Prompts the user to skip if the current branch is dirty
ask_if_skip_dirty() {
    tree_is_clean && return 0
    git_status
    ask "Working tree is not clean, would you like to skip this project (y to skip, n to recheck)" && return 1
    ask_if_skip_dirty
}

#+end_src
** ask_if_skip_dirty_merge()
#+begin_src sh :tangle gitmanager
#Prompts the user to skip if the current branch is dirty or revert the merge and continue
ask_if_skip_dirty_merge() {
    tree_is_clean && return 0
    git_status
    echo    "${red}Auto merge failed, conflicts found${reset}."
    echo    "Would you like to skip remaining branches in this project or revert the merge?"
    read -p "(y to skip, n to recheck, r to revert merge and continue) ${yellow}y/n/r${reset} " -n 1 -r
    echo -e "\n\n"
    [[ $REPLY =~ ^[Yy]$ ]] && return 1
    [[ $REPLY =~ ^[Rr]$ ]] && git_merge_abort
    ask_if_skip_dirty_merge
}

#+end_src
* Cmds
** find()_repos
#+begin_src sh :tangle gitmanager
########################################################
#######################  CMDS  #########################
########################################################


#Finds repos on the system
find_repos() {
    cd $1
    find ~+ -name .git -type d -prune 2> /dev/null  | grep -v -f ${cfg_path}/repos.cache >> ${cfg_path}/repos.cache
    echo -e "Updated repos.cache\n"

    if [[ ! -e ${cfg_path}/repos.cache ]]; then
        echo "Cannot find repos.cache. Exiting..."
        read -p "Press enter to continue"
        exit 1
    fi
    echo "Found the following repos (in repos.cache)"
    cat ${cfg_path}/repos.cache
    echo
    if [[ ! -e ${cfg_path}/repos.exclude ]]; then
        echo "Cannot find repos.exclude"
        touch ${cfg_path}/repos.exclude
        echo -e "Created repos.exclude\nCopy the path of any unwanted repos in the above output to a new line of this file.\n"
        read -p "Press enter to continue once you have completed this step"
    fi
    echo "Excluding the following repos (in repos.exclude)"
    cat ${cfg_path}/repos.exclude
    echo -e "\nFinal list"
    cat ${cfg_path}/repos.cache | grep -vf ${cfg_path}/repos.exclude
    repos=$(cat ${cfg_path}/repos.cache | grep -v -f ${cfg_path}/repos.exclude)
}

#+end_src
** repos_summary()
#+begin_src sh :tangle gitmanager
#Displays a brief summary of all repos
repos_summary() {
    git_fetch_all_repos
    for path in $repos; do
        cd "$path/..";
        git_summary;
    done | column -t -c 1 -s ":";
}

#+end_src
** repos_status()
#+begin_src sh :tangle gitmanager
#Displays the status of all repos
repos_status() {
    for path in $repos; do
        cd "$path/.."
        git_summary
	git_status
	echo -e '\n'
    done
}

#+end_src
** compare_branches()
#+begin_src sh :tangle gitmanager
#Compares all the branches of all the repos to a specific branch
compare_branches() {
    [ -z "$1" ] && continue;
    for path in $repos; do
        cd "$path/.."
        header=$(echo -e "----------------------------------------~-----< $(pwd | xargs basename) >-----~----------------------------------------")
        footer=$(echo -e "________________________________________~______________________~________________________________________")
        git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads | \
        while read local remote; do
            [[ $1 == "origin/master" ]] && remote="origin/master"
	    get_ahead_behind $local $remote
            echo -e "${local}~(ahead ${ahead}) | (behind ${behind})~$remote\n"
        done | echo -e "${header}\n$(cat)\n${footer}"
    done | cat | column -t -c 1 -s "~"
    echo
}

#+end_src
** commit_and_push()
#+begin_src sh :tangle gitmanager
#Commit changes and push in all branches
commit_and_push() {
    for path in $repos; do
        cd "$path/.."
	git_summary && continue
	[[ $? == 1 ]] && continue
        git_status
        #prompt for diff unless NODIFF specified
        [[ $1 != "NODIFF" ]] && ask "Show diff" && echo -e "$(git diff --color=always)\n"

        if ask "Stage all changes + commit"; then
            git add -A
            git_status
	    git_commit
            git_status
            ask_if_push
        fi
        echo -e "$(git_status)\n\n"
    done
}

#+end_src
** rebase_branches()
#+begin_src sh :tangle gitmanager
#Rebase all branches
rebase_branches() {
    for path in $repos; do
        check_should_skip_repo && git_get_branches || continue
        for branch in $branches; do
            git_checkout
            ask "Rebase this branch on $1" || echo -e "Skipping...\n"; continue
	    git_rebase
            ask_if_skip_dirty_merge || continue
	    ask_if_push
        done
    done
}

#+end_src
** merge_into_branches()
#+begin_src sh :tangle gitmanager
#Merge a branch into all branches
merge_into_branches() {
    for path in $repos; do
        check_should_skip_repo && git_get_branches || continue
        for branch in $branches; do
            git_checkout
            ask "Merge origin/master into this branch" || echo "Skipping..."; continue
            git_merge
            ask_if_skip_dirty_merge || continue
	    ask_if_push
        done
    done
}

#+end_src
** clean_branches()
#+begin_src sh :tangle gitmanager
#Clean old branches already merged into master
clean_branches() {
    for path in $repos; do
       check_should_skip_repo && git_get_branches || continue
       for branch in $branches; do
           get_ahead_behind "$branch" "origin/master"
           printf "$branch (ahead $ahead) | (behind $behind) origin/master\n"
           if [[ "$AHEAD" == 0 ]] && ask "This branch is ${green}0${reset} commits ahead of origin/master. Would you like to delete it"; then
               echo -e "\n$(git branch -D $branch)\n"
           else
               echo -e "\n\n"
           fi
       done
    done
}

#+end_src
** pull()
#+begin_src sh :tangle gitmanager
#pull all branches
pull() {
    for path in $repos; do
        check_should_skip_repo || continue
        git_get_branches
        for branch in $branches; do
            git_checkout $branch
            [[ "$branch_auto" == true ]] || ask "pull" || continue
            git_pull
        done
    done
}

#+end_src
** push_pull()
#+begin_src sh :tangle gitmanager
#push pull all branches
push_pull() {
    for path in $repos; do
        check_should_skip_repo || continue
        git_get_branches
        for branch in $branches; do
            git_checkout $branch
            [[ "$branch_auto" == true ]] || ask "pull+push" || continue
            git_pull
            ask_if_skip_dirty_merge || continue
            git_push
        done
    done
}

#+end_src
** list_branches()
#+begin_src sh :tangle gitmanager
#List all branches in all repos
list_branches() {
    for path in $repos; do
        echo "Branches in $(colour_path)"
        cd ${path}/..
        git_branch
    done
}

#+end_src
** everything()
#+begin_src sh :tangle gitmanager
#Bring everything up to date
everything() {
    for path in $repos; do
        [[ "$repo_auto" == true ]] || ask "Update project $(colour_path)" || continue
        git_fetch "$path/.."
        git_get_branches
        for branch in $branches; do
	    git_summary && continue
	    ret="$?"
            #If out of sync then pull push
	    if [[ "$ret" == 1 ]]; then
                [[ "$branch_auto" == true ]] || ask "pull+push" || continue
	        git_pull
                ask_if_skip_dirty_merge || continue
	        git_push
            #If conflicts detected ask to skip (auto skip if auto enabled)
            elif [[ "$ret" == 2 ]]; then
                [[ "$branch_auto" == true ]] && continue
                ask_if_skip_dirty_merge || continue
	        git_push
            #If changes detected, commit them
            elif [[ "$ret" == 3 ]]; then
                git_status
                #prompt for diff unless NODIFF specified
                [[ $1 != "NODIFF" ]] && ask "Show diff" && echo -e "$(git diff --color=always)\n"
                if ask "Stage all changes + commit"; then
                    git add -A
                    git_status
	            git_commit
                    git_status
                    ask_if_push
                fi
                echo -e "$(git_status)\n\n"
	    fi
        done
    done
}

#+end_src
** show_help()
#+begin_src sh :tangle gitmanager

#Prints the help function
show_help() {
    echo    "Usage: gitmanage [OPTION]..."
    echo -e "Used to manage multiple branches across multiple git repositories\n"

    echo    "  -F          Search for git repos"
    echo -e "              Searches home directory for git repos"
    echo -e "              (This must completed at least once to update the cache used by other functions)\n"

    echo    "  -f          Fetch repos"
    echo -e "              Fetch and prune all repos\n"

    echo    "  -s          Check for changes"
    echo -e "              Checks each repository for changes which have not been comitted and provides a simple summary\n"

    echo    "  -S          List changes"
    echo -e "              List all changes in each repository which have not been comitted\n"

    echo    "  -p          Pull"
    echo -e "              Prompts you to pull each branch in your git repositories\n"

    echo    "  -ap         Auto pull"
    echo -e "              Prompts you to pull each branch in your git repositories without asking confirmation for each branch\n"

    echo    "  -Aap         Full auto pull"
    echo -e "              Pull each branch in your git repositories without asking confirmation for each branch\n"

    echo    "  -P          Pull and push"
    echo -e "              Prompts you to pull+push each branch in your git repositories\n"

    echo    "  -aP         Auto pull and push "
    echo -e "              Prompts you to pull+push each of in your git repositories without asking confirmation for each branch\n"

    echo    "  -AaP         Full auto pull and push "
    echo -e "              pull+push each branch in your git repositories without asking confirmation for each branch\n"

    echo    "  -c          Add all changes + commit + push"
    echo -e "              Prompts you to add all changes + commit + push each git repository\n"

    echo    "  -C          Add all changes + commit + push NO DIFF"
    echo -e "              Prompts you to add all changes + commit + push each git repository but will not prompt to show diff\n"

    echo    "  -b clean    Clean old branches"
    echo -e "              Prompts you to delete any branches in your git repositories which are 0 commits ahead of origin/master\n"

    echo    "  -m          Merge origin/master into branches"
    echo -e "              Prompts you to merge origin/master into each branch in you git repositories\n"

    echo    "  -r          Rebase branches"
    echo -e "              Prompts you to rebase into each branch on the target branch in you git repositories\n"

    echo    "  -b          List branches"
    echo -e "              Lists all the local branches in your git repositories\n"

    echo    "  -ba         List all branches including remotes"
    echo -e "              Lists all the branches in your git repositories\n"

    echo    "  -b master   Compare master"
    echo -e "              Compares each branch in your git repositories against origin/master\n"

    echo    "  -B master   Compare master no fetch"
    echo -e "              Compares each branch in your git repositories against origin/master\n"

    echo    "  -b remote   Compare remote"
    echo -e "              Compares each branch in your git repositories against it's remote branch\n"

    echo    "  -B remote   Compare remote no fetch"
    echo -e "              Compares each branch in your git repositories against it's remote branch\n"

    echo    "  -h          Help"
    echo -e "              Displays this message"
}
#+end_src
** show_help2()
#+begin_src sh :tangle gitmanager
#Prints the help function
show_help2() {
    echo    "Usage: gitmanage [OPTION]..."
    echo -e "Used to manage multiple branches across multiple git repositories\n"

    echo    "  -F          Search for git repos"
    echo -e "              Searches home directory for git repos"
    echo -e "              (This must completed at least once to update the cache used by other functions)\n"

    echo    "  -f          Fetch repos"
    echo -e "              Fetch and prune all repos\n"

    echo    "  -s          Check for changes"
    echo -e "              Checks each repository for changes which have not been comitted and provides a simple summary\n"

    echo    "  -S          List changes"
    echo -e "              List all changes in each repository which have not been comitted\n"

    echo    "  -p          Pull"
    echo -e "              Prompts you to pull each branch in your git repositories\n"

    echo    "  -ap         Auto pull"
    echo -e "              Prompts you to pull each branch in your git repositories without asking confirmation for each branch\n"

    echo    "  -Aap         Full auto pull"
    echo -e "              Pull each branch in your git repositories without asking confirmation for each branch\n"

    echo    "  -P          Pull and push"
    echo -e "              Prompts you to pull+push each branch in your git repositories\n"

    echo    "  -aP         Auto pull and push "
    echo -e "              Prompts you to pull+push each of in your git repositories without asking confirmation for each branch\n"

    echo    "  -AaP         Full auto pull and push "
    echo -e "              pull+push each branch in your git repositories without asking confirmation for each branch\n"

    echo    "  -c          Add all changes + commit + push"
    echo -e "              Prompts you to add all changes + commit + push each git repository\n"

    echo    "  -C          Add all changes + commit + push NO DIFF"
    echo -e "              Prompts you to add all changes + commit + push each git repository but will not prompt to show diff\n"

    echo    "  -b clean    Clean old branches"
    echo -e "              Prompts you to delete any branches in your git repositories which are 0 commits ahead of origin/master\n"

    echo    "  -m          Merge origin/master into branches"
    echo -e "              Prompts you to merge origin/master into each branch in you git repositories\n"

    echo    "  -r          Rebase branches"
    echo -e "              Prompts you to rebase into each branch on the target branch in you git repositories\n"

    echo    "  -b          List branches"
    echo -e "              Lists all the local branches in your git repositories\n"

    echo    "  -ba         List all branches including remotes"
    echo -e "              Lists all the branches in your git repositories\n"

    echo    "  -b master   Compare master"
    echo -e "              Compares each branch in your git repositories against origin/master\n"

    echo    "  -B master   Compare master no fetch"
    echo -e "              Compares each branch in your git repositories against origin/master\n"

    echo    "  -b remote   Compare remote"
    echo -e "              Compares each branch in your git repositories against it's remote branch\n"

    echo    "  -B remote   Compare remote no fetch"
    echo -e "              Compares each branch in your git repositories against it's remote branch\n"

    echo    "  -h          Help"
    echo -e "              Displays this message"
}
#+end_src
** die()
#+begin_src sh :tangle gitmanager


die() { echo "$*" >&2; exit 2; }  # complain to STDERR and exit with error
#+end_src
** needs_arg()
#+begin_src sh :tangle gitmanager
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }
#+end_src
* Process args
#+begin_src sh :tangle gitmanager

#Process args
while getopts "eEfsSpPcCmMF:r:b:B:h:c-:" OPT; do
    if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
      OPT="${OPTARG%%=*}"       # extract long option name
      OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
      OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
    fi
    set_repos
    case "$OPT" in
        f) git_fetch_all_repos && exit;;
        s) repos_summary && exit;;
        S) repos_status && exit;;
        p) pull && exit;;
        P) push_pull && exit;;
        c) commit_and_push && exit;;
        C) commit_and_push "NODIFF" && exit;;
        m) echo "TODO deted merge conflicts" && exit;;
        M) merge_into_branches && exit;;
        r) rebase_branches "origin/master" && exit;;
        b) list_branches && exit;;
        B) echo "TODO" && exit;;
        e) everything && exit;;
        E) repo_auto=true; branch_auto=true; everything && exit;;
        h) show_help && exit;;
        ap) branch_auto=true; pull && exit;;
        Ap) repo_auto=true; pull && exit;;
        sync) repo_auto=true; branch_auto=true; pull && exit;;
        aP) branch_auto=true; push_pull && exit;;
        AP) repo_auto=true; push_pull && exit;;
        AaP) repo_auto=true; branch_auto=true; push_pull && exit;;
        b)
            set_repos
            if [[ $OPTARG == "clean" ]]; then clean_branches; fi
            git_fetch_all_repos
            if [[ $OPTARG == "master" ]]; then compare_branches "origin/master"
            elif [[ $OPTARG == "remote" ]]; then compare_branches "remote"
            else
                compare_branches "$OPTARG"
            fi
            exit
        ;;
        B)
            set_repos
            if [[ $OPTARG == "master" ]]; then compare_branches "origin/master"
            elif [[ $OPTARG == "remote" ]]; then compare_branches "remote"
            else
                compare_branches "$OPTARG"
            fi
            exit
        ;;
        F)
            if [[ $OPTARG == "clean" ]]; then echo "TODO Clean repo.cache files"
            else
                find_repos $OPTARG
            fi
            exit
        ;;
        r)
            set_repos
            git_fetch_all_repos
            if [[ $OPTARG == "master" ]]; then rebase_branches "origin/master"
            else
                rebase_branches "$OPTARG"
            fi
            exit
        ;;
        ??*) die "Illegal option --$OPT" ;;  # bad long option
        ?) exit 2 ;;  # bad short option (error reported via getopts)
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list

#+end_src
* Show menu
#+begin_src sh :tangle gitmanager
#Show menu
show_help
while true; do
    opt=$(show_menu)

    if [[ $opt == "Search for git repos" ]]; then
       echo -e "\nFinding git repos on C:"
       find_repos "$HOME"
    elif [[ $opt == "Quit" ]]; then
        break
    else
        echo
        using_repos
    fi

    if [[ $opt == "Pull and push" ]]; then
        echo -e "\n${yellow}Prompts you to pull+push each branch in you git repositories\n${reset}"
        push_pull
    elif [[ $opt == "Pull and push auto" ]]; then
        echo -e "\n${yellow}Prompts you to pull+push each branch in you git repositories\n${reset}"
        branch_auto=true
        push_pull
    elif [[ $opt == "Add all changes + commit + push" ]]; then
        echo -e "\n${yellow}Prompts you to Add all changes + commit + push each of you git repositories\n${reset}"
        commit_and_push
    elif [[ $opt == "Clean old branches" ]]; then
        echo -e "\n${yellow}Prompts you to delete any branches in your git repositories which are 0 commits ahead of master\n${reset}"
        clean_branches
    elif [[ $opt == "List branches" ]]; then
        echo -e "\n${yellow}Lists all the local branches in your git repositories\n${reset}"
        list_branches
    elif [[ $opt == "Compare master" ]]; then
        echo -e "\n${yellow}Compares each branch in your git repositories against origin/master\n${reset}"
        git_fetch_all_repos
        compare_branches "origin/master"
    elif [[ $opt == "Compare remote" ]]; then
        echo -e "\n${yellow}Compares each branch in your git repositories against it's remote branch\n${reset}"
        git_fetch_all_repos
        compare_branches "remote"
    elif [[ $opt == "Check for changes" ]]; then
        echo -e "\n${yellow}Checks each repository for changes which have not been comitted\n${reset}"
        repos_summary
    elif [[ $opt == "List changes" ]]; then
        echo -e "\n${yellow}Checks each repository for changes which have not been comitted\n${reset}"
        repos_status
    elif [[ $opt == "Merge origin/master into branches" ]]; then
        echo -e "\n${yellow}Prompts you to merge origin/master into each branch in you git repositories\n${reset}"
        merge_into_branches
    fi
    echo
done

#+end_src
